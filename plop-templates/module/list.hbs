<script lang="ts" setup>
import { ElMessage, ElMessageBox, ElTable } from 'element-plus'
import { get } from 'lodash-es'
import FormMode from './components/FormMode/index.vue'
import type { {{ pascalCase moduleName }}Params } from '@/api/modules/{{#if relativePath}}{{ relativePath }}/{{/if}}model/{{ moduleName }}Model'
import crud{{properCase moduleName}} from '@/api/modules/{{#if relativePath}}{{ relativePath }}/{{/if}}{{ moduleName }}'
import eventBus from '../../src/utils/eventBus'
import usePagination from '../../src/utils/usePagination.js'
import type { DataConfig } from '@/types/global'

defineOptions({
  name: '{{ properCase componentName }}',
})
const {
  pagination,
  search,
  getParams,
  onSizeChange,
  onCurrentChange,
  onSortChange,
  resetQuery,
} = usePagination()
const router = useRouter()
// const route = useRoute()
const defaultQuery = {
  name: '',
  daterange: [],
}
const data = ref<DataConfig>({
  loading: false,
  tableAutoHeight: true,
  /**
   * 详情展示模式
   * router 路由跳转
   * dialog 对话框
   * drawer 抽屉
   */
  formMode: 'router',
  // 详情
  formModeProps: {
    visible: false,
    id: '',
  },
  // 搜索
  search,
  searchFold: false,
  // 批量操作
  batch: {
    enable: false,
    selectionDataList: [],
  },
  // 列表数据
  dataList: [],
})

const table = ref<InstanceType<typeof ElTable>>()

onMounted(() => {
  getDataList()
  if (data.value.formMode === 'router') {
    eventBus.on('get-data-list', () => {
      getDataList()
    })
  }
})

onBeforeUnmount(() => {
  if (data.value.formMode === 'router') {
    eventBus.off('get-data-list')
  }
})

async function getDataList(current?: number) {
  if (current && current === 1) {
    pagination.value.page = current
  }
  data.value.loading = true
  const params = getParams<{{ pascalCase moduleName }}Params>({
    ...data.value.search
  },
  {
    type: 'daterange',
    name: 'daterange',
    prop: 'createdTime',
  },
  )
  const res = await crud{{properCase moduleName}}.list(params)
  data.value.dataList = get(res, 'records', [])
  pagination.value.total = Number(res.total)
  pagination.value.page = Number(get(res, 'current', 1))
  // pagination.value.size = res.size
  setTimeout(() => {
    data.value.loading = false
  }, 100)
}

// 每页数量切换
function sizeChange(size: number) {
  onSizeChange(size).then(() => getDataList())
}

// 当前页码切换（翻页）
function currentChange(page = 1) {
  onCurrentChange(page).then(() => getDataList())
}

// 字段排序
function sortChange({ prop, order }: any) {
  onSortChange(prop, order).then(() => getDataList())
}

function onCreate() {
  if (data.value.formMode === 'router') {
    router.push({
      name: '{{properCase componentDetailName }}Create',
      params: {
        type: 'add',
      }
    })
  }
  else {
    data.value.formModeProps.id = ''
    data.value.formModeProps.visible = true
    data.value.formModeProps.type = ActionEnum.ADD
  }
}

function onEdit(row: any) {
  if (data.value.formMode === 'router') {
    router.push({
      name: '{{properCase componentDetailName }}Edit',
      params: {
        id: row.id,
        type: 'edit'
      },
    })
  } else {
    data.value.formModeProps.id = row.id
    data.value.formModeProps.visible = true
    data.value.formModeProps.type = ActionEnum.EDIT
  }
}

function onView(row: any) {
  if (data.value.formMode === 'router') {
    router.push({
      name: '{{properCase componentDetailName }}Detail',
      params: {
        id: row.id,
        type: ActionEnum.VIEW
      },
    })
  } else {
    data.value.formModeProps.id = row.id
    data.value.formModeProps.visible = true
    data.value.formModeProps.type = ActionEnum.VIEW
  }
}

function onDel(row?: any) {
  let ids: string[] = []
  if (row) {
    ids.push(row.id)
  } else {
    ids = data.value.batch.selectionDataList.map(item => item.id)
  }
  ElMessageBox.confirm(`确认删除数量「${ids.length}」吗？`, '确认信息').then(() => {
    crud{{properCase moduleName}}.delete(ids).then(() => {
      getDataList()
      ElMessage.success({
        message: '删除成功',
        center: true,
      })
    })
  }).catch(() => {
  })
}

</script>

<template>
  <div :class="{ 'absolute-container': data.tableAutoHeight }">
    <page-header title="{{cname}}" />
    <page-main>
      <search-bar
          :fold="data.searchFold"
          :show-toggle="false"
      >
        <template #default="{ fold }">
          <el-form class="search-form" :model="data.search" size="default" inline inline-message label-width="100px" label-suffix="：">
            <el-form-item label="标题">
              <el-input
                  v-model="data.search.title" placeholder="请输入，支持模糊查询" clearable
                  @keydown.enter="currentChange()" @clear="currentChange()"
              />
            </el-form-item>
            <el-form-item v-show="!fold" label="标题2">
              <el-input
                  v-model="data.search.title2" placeholder="请输入，支持模糊查询" clearable
                  @keydown.enter="currentChange()" @clear="currentChange()"
              />
            </el-form-item>
            <el-form-item v-show="!fold" label="标题3">
              <el-input
                  v-model="data.search.title3" placeholder="请输入，支持模糊查询" clearable
                  @keydown.enter="currentChange()" @clear="currentChange()"
              />
            </el-form-item>
            <el-form-item v-show="!fold" label="创建时间">
              <el-date-picker
                  v-model="data.search.daterange"
                  :default-time="[
                  new Date(2000, 1, 1, 0, 0, 0),
                  new Date(2000, 2, 1, 23, 59, 59),
                ]"
                  end-placeholder="结束时间"
                  range-separator=":"
                  start-placeholder="开始时间"
                  style="width: 250px;"
                  type="daterange"
                  value-format="YYYY-MM-DD HH:mm:ss"
              />
            </el-form-item>
            <el-form-item>
              <el-button type="primary" @click="currentChange()">
                <template #icon>
                  <SvgIcon name="ep:search"/>
                </template>
                筛选
              </el-button>
              <el-button type="primary" @click="resetQuery(defaultQuery)">
                重置
              </el-button>
              <el-button type="primary" link @click="data.searchFold = !fold">
                <template #icon>
                  <SvgIcon :name="fold ? 'i-ep:caret-bottom' : 'i-ep:caret-top'"/>
                </template>
                \{{ fold ? '展开' : '收起' }}
              </el-button>
            </el-form-item>
          </el-form>
        </template>
      </search-bar>
      <el-divider border-style="dashed"/>
      <el-space wrap>
        <el-button type="primary" size="default" @click="onCreate">
          <template #icon>
            <SvgIcon name="ep:plus"/>
          </template>
          新增
        </el-button>
        <el-button size="default" :disabled="!data.batch.selectionDataList.length" type="danger" @click="onDel()">
          <template #icon>
            <SvgIcon name="ep:delete"/>
          </template>
          删除
        </el-button>
        <el-button-group>
          <el-button size="default" :disabled="!data.batch.selectionDataList.length">
            批量操作按钮组1
          </el-button>
          <el-button size="default" :disabled="!data.batch.selectionDataList.length">
            批量操作按钮组2
          </el-button>
        </el-button-group>
      </el-space>
      <ElTable ref="table" v-loading="data.loading" class="list-table" height="100%" :data="data.dataList" border stripe
               highlight-current-row @sort-change="sortChange" @selection-change="data.batch.selectionDataList = $event"
      >
        <el-table-column v-if="data.batch.enable" type="selection" align="center" fixed/>
        <el-table-column prop="title" label="标题"/>
        <el-table-column label="操作" width="250" align="center" fixed="right">
          <template #default="scope">
            <el-button type="primary" size="small" plain @click="onView(scope.row)">
              查 看
            </el-button>
            <el-button type="primary" size="small" plain @click="onEdit(scope.row)">
              编 辑
            </el-button>
            <el-button type="danger" size="small" plain type="danger" @click="onDel(scope.row)">
              删 除
            </el-button>
          </template>
        </el-table-column>
      </ElTable>
      <el-pagination :current-page="pagination.page" :total="pagination.total" :page-size="pagination.size" :page-sizes="pagination.sizes" :layout="pagination.layout" :hide-on-single-page="false" class="pagination" background @size-change="sizeChange" @current-change="currentChange" />
    </page-main>
    <FormMode v-if="['dialog', 'drawer'].includes(data.formMode)" :id="data.formModeProps.id" v-model="data.formModeProps.visible" :mode="data.formMode" @success="getDataList" />
  </div>
</template>

<style scoped>
  .el-pagination {
    margin-top: 20px;
  }
  .absolute-container {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    .page-header {
      margin-bottom: 0;
    }
    .page-main {
      flex: 1;
      overflow: auto;
      display: flex;
      flex-direction: column;
      .search-container {
        margin-bottom: 0;
      }
    }
  }

  .page-main {
    .search-form {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: -18px;
      :deep(.el-form-item) {
        flex: 1 1 300px;
        &:last-child {
          margin-left: auto;
          .el-form-item__content {
            justify-content: flex-end;
          }
        }
      }

    }
    .el-divider {
      margin-inline:-20px;width: calc(100% + 40px);
    }
  }
</style>
